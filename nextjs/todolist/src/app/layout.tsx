import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


/*
src내부에 폴더링 정리
app - 페이지 컴포넌트 관리 폴더
components - 재사용 가능한 ui 컴포넌트 관리 폴더
containers - 여러 컴포넌트들을 포함하는 컴테이너 관리 폴더
hooks - 커스텀 훅
states / services - 상태관리 코드, 외부 api설정파일 관리
types - 타입스크립트 타입 정의 관리 폴더
api - 외부 api 파일 저장
*/